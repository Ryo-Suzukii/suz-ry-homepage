version: 0.2

# CodeBuild用のビルド設定
# Lambda Layer のパッケージを Lambda 互換環境でビルドします

env:
  variables:
    # デフォルト値（パイプラインから上書き可能）
    PYTHON_VERSION: "python3.13"
    LAYER_NAME: "common-libraries"
  parameter-store:
    # 必要に応じてパラメータストアから値を取得
    # SOME_SECRET: "/lambda/layer/secret"

phases:
  install:
    runtime-versions:
      python: "3.13"
    commands:
      - echo "Installing build dependencies..."
      - python --version
      - pip --version
      
  pre_build:
    commands:
      - echo "Pre-build phase started on `date`"
      - echo "Validating requirements.txt..."
      - |
        if [ ! -f requirements.txt ]; then
          echo "Error: requirements.txt not found"
          exit 1
        fi
      - echo "Requirements file validated"
      - echo "Environment variables:"
      - echo "  PYTHON_VERSION=$PYTHON_VERSION"
      - echo "  LAYER_NAME=$LAYER_NAME"
      - echo "  CODEBUILD_RESOLVED_SOURCE_VERSION=$CODEBUILD_RESOLVED_SOURCE_VERSION"
      
  build:
    commands:
      - echo "Build phase started on `date`"
      - echo "Creating layer directory structure..."
      
      # Lambda Layer の標準ディレクトリ構造を作成
      - mkdir -p build/python/lib/$PYTHON_VERSION/site-packages
      
      # 最新のpipに更新
      - python -m pip install --upgrade pip
      
      # パッケージインストール（Lambda環境互換）
      - echo "Installing Python packages for Lambda Layer..."
      - |
        pip install \
          --platform manylinux2014_x86_64 \
          --target build/python/lib/$PYTHON_VERSION/site-packages \
          --implementation cp \
          --only-binary=:all: \
          --upgrade \
          -r requirements.txt
      
      # 不要なファイルを削除してサイズ削減
      - echo "Cleaning up unnecessary files..."
      - find build/python -name "*.pyc" -delete
      - find build/python -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
      - find build/python -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true
      - find build/python -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
      - find build/python -name "test" -type d -exec rm -rf {} + 2>/dev/null || true
      
      # Layerパッケージサイズを確認
      - echo "Calculating layer size..."
      - LAYER_SIZE=$(du -sh build/python | cut -f1)
      - echo "Layer size (uncompressed): $LAYER_SIZE"
      
      # ZIP圧縮
      - echo "Creating layer ZIP file..."
      - cd build
      - zip -r ../layer-package.zip python/ -q
      - cd ..
      
      - ZIP_SIZE=$(ls -lh layer-package.zip | awk '{print $5}')
      - echo "Layer ZIP size: $ZIP_SIZE"
      
      # S3にアップロード用のメタデータファイル作成
      - echo "Creating metadata..."
      - |
        cat > layer-metadata.json << EOF
        {
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "pythonVersion": "$PYTHON_VERSION",
          "layerName": "$LAYER_NAME",
          "buildId": "$CODEBUILD_BUILD_ID",
          "sourceVersion": "$CODEBUILD_RESOLVED_SOURCE_VERSION",
          "uncompressedSize": "$LAYER_SIZE",
          "compressedSize": "$ZIP_SIZE"
        }
        EOF
      
      - echo "Build completed successfully!"
      
  post_build:
    commands:
      - echo "Post-build phase started on `date`"
      
      # ビルド結果の検証
      - |
        if [ ! -f layer-package.zip ]; then
          echo "Error: layer-package.zip not found"
          exit 1
        fi
      
      # ZIP ファイルの内容確認
      - echo "Verifying layer package contents..."
      - unzip -l layer-package.zip | head -20
      
      # Layer のサイズ制限チェック (250MB)
      - |
        ZIP_SIZE_BYTES=$(stat -f%z layer-package.zip 2>/dev/null || stat -c%s layer-package.zip)
        MAX_SIZE_BYTES=$((250 * 1024 * 1024))
        if [ $ZIP_SIZE_BYTES -gt $MAX_SIZE_BYTES ]; then
          echo "Error: Layer size ($ZIP_SIZE_BYTES bytes) exceeds Lambda limit (250MB)"
          exit 1
        fi
      
      - echo "Layer package validation passed"
      - echo "Post-build completed on `date`"

artifacts:
  files:
    - layer-package.zip
    - layer-metadata.json
    - requirements.txt
  name: lambda-layer-artifacts-$CODEBUILD_BUILD_NUMBER

cache:
  paths:
    - '/root/.cache/pip/**/*'